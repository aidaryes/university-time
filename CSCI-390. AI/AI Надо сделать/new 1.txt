arrWithTun2 = []
arrWithTun2add = []

for i in range(len(arrFor2tunRoom)):
    arrWithTun2add.append(arrFor2tunRoom[i][1])
    arrWithTun2add.append(arrFor2tunRoom[i][2])
    arrWithTun2add.append(arrFor2tunRoom[i][3])
    arrWithTun2add.append(arrFor2tunRoom[i][4])
    
    R2.append(arrWithTun2add)
    arrWithTun2add = []
	
XforarrWithTun2 = []
XforarrWithTun2add = []
yforarrWithTun2 = []

for i in range(len(R2)):
    XforarrWithTun2add.append(R2[i][0])
    XforarrWithTun2add.append(R2[i][1])
    XforarrWithTun2add.append(R2[i][2])
    
    XforarrWithTun2.append(XforarrWithTun2add)
    XforarrWithTun2add = []
    yforarrWithTun2.append(R2[i][3])

#6	
arrFor6tunRoom = []
for i in range(len(arrFor6tunRoom)):
    arrFor6tunRoom[i][1] = float(arrFor6tunRoom[i][1])
    arrFor6tunRoom[i][2] = float(arrFor6tunRoom[i][2])
    arrFor6tunRoom[i][3] = int(arrFor6tunRoom[i][3])
    arrFor6tunRoom[i][4] = int(arrFor6tunRoom[i][4])

    
arrWithTun6 = []
arrWithTun6add = []

for i in range(len(arrFor6tunRoom)):
    arrWithTun6add.append(arrFor6tunRoom[i][1])
    arrWithTun6add.append(arrFor6tunRoom[i][2])
    arrWithTun6add.append(arrFor6tunRoom[i][3])
    arrWithTun6add.append(arrFor6tunRoom[i][4])
    
    R6.append(arrWithTun6add)
    arrWithTun6add = []

XforarrWithTun6 = []
XforarrWithTun6add = []
yforarrWithTun6 = []

for i in range(len(R6)):
    XforarrWithTun6add.append(R6[i][0])
    XforarrWithTun6add.append(R6[i][1])
    XforarrWithTun6add.append(R6[i][2])
    
    XforarrWithTun6.append(XforarrWithTun6add)
    XforarrWithTun6add = []
    yforarrWithTun6.append(R6[i][3])
    
#A simple perceptron
X = XforarrWithTun2
y = yforarrWithTun2
clf = MLPClassifier(solver='lbfgs', alpha=1e-5, hidden_layer_sizes=(), random_state=1)
clf.fit(X, y)

print (clf.predict([[0.2531, 0.2584, 0]]))


X = XforarrWithTun6
y = yforarrWithTun6
clf = MLPClassifier(solver='lbfgs', alpha=1e-5, hidden_layer_sizes=(), random_state=1)
clf.fit(X, y)



#MLP with one hidden layer and 2 hidden nodes
X = XforarrWithTun2
y = yforarrWithTun2
clf = MLPClassifier(solver='lbfgs', alpha=1e-5, hidden_layer_sizes=(2), random_state=1)
clf.fit(X, y)


X = XforarrWithTun6
y = yforarrWithTun6
clf = MLPClassifier(solver='lbfgs', alpha=1e-5, hidden_layer_sizes=(2), random_state=1)
clf.fit(X, y)



#MLP with two hidden layers each containing 3 hidden nodes
X = XforarrWithTun2
y = yforarrWithTun2
clf = MLPClassifier(solver='lbfgs', alpha=1e-5, hidden_layer_sizes=(3, 3), random_state=1)
clf.fit(X, y)



X = XforarrWithTun6
y = yforarrWithTun6
clf = MLPClassifier(solver='lbfgs', alpha=1e-5, hidden_layer_sizes=(3, 3), random_state=1)
clf.fit(X, y)
